<launch>
  <!-- 设置 Gazebo 环境变量以查找模型 -->
    <arg name="robot"  default="steel"/>
    <arg name="arm"  default="$(eval {'iron': False}.get(arg('robot'), True))"/>
    <arg name="end_effector"  default="$(eval {'iron': 'false', 'steel': 'pal-gripper', 'titanium': 'pal-hey5'}.get(arg('robot'), 'pal-gripper'))"/>
    <arg name="ft_sensor"  default="$(eval {'steel': 'schunk-ft'}.get(arg('robot'), 'false'))"/>
    <arg name="laser_model"  default="sick-571"/>
    <arg name="camera_model"  default="orbbec-astra"/>
    <arg name="gui" default="true"/>
    <arg name="debug" default="false"/>
    <arg name="public_sim" default="true"/>
    <arg name="tuck_arm" default="true"/>
    <arg name="recording" default="false"/>
    <arg name="extra_gazebo_args" default=""/>
    <arg name="use_moveit_camera" default="false"/>
    <arg name="use_dynamic_footprint" default="false"/>
    <arg name="rviz"     default="true"/>
    <arg name="gzclient" default="true"/>
    <arg name="planner"        default="base"/>
    <arg name="global_planner" default="global_planner"/>
    <arg name="local_planner"  default="$(eval 'teb' if (arg('public_sim') or arg('base_type')=='omni_base') else 'pal')"/>
    <arg name="base_type" default="pmb2"/>
    <arg name="localization"   default="amcl"/>
    <arg name="advanced_navigation"   default="false"/> <!-- Requires extra software from PAL Robotics-->
    <arg name="sim_sufix" value="_public_sim"     if="$(arg public_sim)"/>
    <arg name="sim_sufix" value=""                unless="$(arg public_sim)"/>
    <arg name="map" default="/home/laowang/workspace/system_integration_ws/src/real_maps/maps/my_room_map.yaml"/>

  <!-- <node name="map_server" pkg="map_server" type="map_server" args="/home/laowang/workspace/system_integration_ws/src/real_maps/maps/my_room_map.yaml"/> -->

  <include file="$(find tiago_2dnav_gazebo)/launch/navigation.launch">
      <arg name="state"          value="localization"/>
      <arg name="planner"        value="$(arg planner)"/>
      <arg name="global_planner" value="$(arg global_planner)"/>
      <arg name="local_planner"  value="$(arg local_planner)"/>
      <arg name="localization"   value="$(arg localization)"/>
      <arg name="map"            value="$(arg map)"/>
      <arg name="public_sim"     value="$(arg public_sim)"/>
      <arg name="rgbd_sensors"   value="$(arg advanced_navigation)"/>
      <arg name="laser_model"    value="$(arg laser_model)"/>
      <arg name="base_type"      value="$(arg base_type)"/> 
  </include> 
  
  <group if="$(arg advanced_navigation)">
      <node name="rviz" pkg="rviz" type="rviz" if="$(arg rviz)"
            args="-d $(find tiago_2dnav)/config/rviz/advanced_navigation.rviz"/>
  </group>
     <group unless="$(arg advanced_navigation)">
      <node name="rviz" pkg="rviz" type="rviz" if="$(arg rviz)"
            args="-d $(find tiago_2dnav)/config/rviz/navigation$(arg sim_sufix).rviz"/>
    </group>
  

  <group unless="$(arg public_sim)">
    <include file="$(find pal_loc_measure)/launch/pal_loc_measure.launch">
      <arg name="training" value="False"/>
    </include>
  </group>

  <group if="$(arg advanced_navigation)">
    <!-- Advanced navigation -->
    <arg name="filter_suffix" value="xtion"               if="$(eval arg('camera_model') == 'orbbec-astra' or arg('camera_model') == 'orbbec-astra-pro' or arg('camera_model') == 'asus-xtion')"/>
    <arg name="filter_suffix" value=""               unless="$(eval arg('camera_model') == 'orbbec-astra' or arg('camera_model') == 'orbbec-astra-pro' or arg('camera_model') == 'asus-xtion')"/>
    <include file="$(find pal_head_manager)/launch/tiago_head_manager.launch"/>
    <node pkg="tiago_2dnav" type="navigation_camera_mgr.py" name="navigation_camera_mgr" />
    <node pkg="pal_zoi_detector" type="zoi_detector_node" name="zoi_detector" />
    <include file="$(find pal_waypoint)/launch/pal_waypoint.launch"/>
    <include file="$(find pal_navigation_manager)/launch/poi_navigation_server.launch"/>
    <node name="roof_rgbd_camera_filter" pkg="pal_pcl" type="pal_stockbot_floor_filter_node" respawn="true" output="screen">
      <remap from="cloud1" to="xtion/depth_registered/points"/>
      <rosparam command="load" file="$(find tiago_rgbd_sensors)/config/roof_floor_filter_$(arg filter_suffix).yaml" />
    </node>
  </group>

	
  <!-- 加载地图并启动定位 -->
  <arg name="with_localization" default="false"/>
  <group if="$(arg with_localization)">
    <include file="$(find ics_gazebo)/launch/tiago_map_localization.launch" />
  </group>
  

</launch>
